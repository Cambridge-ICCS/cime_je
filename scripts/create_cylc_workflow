#!/usr/bin/env python

"""
Script to create a cylc workflow for an existing case or ensemble
"""

from Tools.standard_script_setup import *
from CIME.case import Case
logger = logging.getLogger(__name__)

###############################################################################
def parse_command_line(args, description):
###############################################################################
    parser = argparse.ArgumentParser(description=description)

    CIME.utils.setup_standard_logging_options(parser)

    parser.add_argument("--caseroot", "-c", required=True, metavar="CASEROOT",default=os.cwd(),
                        help="(required) Full path to an existing case directory. ")

    parser.add_argument("--alert-addresses", help="Comma seperated list of emails for alerts",
                        default=os.environ['USER']+'@'+'ucar.edu')

    parser.add_argument("--cylc-suite-dir", help="Output path for cylc control files",
                        default=os.path.join(os.environ['HOME'],'cylc_suites'))

    parser.add_argument("--postproc-xml", help="pointer to file containing name value pairs of postprocessing xml changes")

    parser.add_argument("--postproc-path", help="path to postprocessing source",
                        default="/glade/u/home/mickelso/CESM_postprocessing_2/")

    parser.add_argument("--conform-path", help="path to conform inputs",
                        default="/glade/p/cesm/conform-input/cmip6_input")

    args = CIME.utils.parse_args_and_handle_standard_logging_options(args, parser)

    return args.case, args.alert_addresses, args.cylc_suite_dir, args.postproc_xml, args.postproc_path, args.conform_path


def _main_func(description):
    caseroot, alert_addresses, cylc_suite_dir, \
        postproc_xml, postproc_path, conform_path = parse_command_line(sys.argv, description)

    with Case(caseroot, read_only=True) as case:
        case.setup_cylc(alert_addresses, cylc_suite_dir, postproc_xml, postproc_path, conform_path)

if __name__ == '__main__':
    _main_func(__doc__)
